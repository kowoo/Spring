Interceptor
필터와 비슷한 역할을 한다.

요청을 처리하기 전에 인터셉터가 요청을 가로채서 먼저 확인을 하고 처리한다.

Spring MVC 구성하기
	1. Maven
	2. dependency
		Spring : core, context, jdbc, web, webmvc, aop
		oracle : ojdbc
		Mybatis: Mybatis, Mybatis-spring
		aspectj: aspectjrt, aspectjweaver
		javax  : jstl
	3. package
		dao(interface)
			dao.mapper
		service(interface, implements)
		controller(/member/memberList 요청처리) + interceptor
		model(Member)
	4. jsp
		memberList
	
interceptor 등록하기
	1. interceptor 클래스 작성 (HandlerInterceptorAdapter를 상속받아서 구현함)
	2. 요청을 가로채서 실행할 내용 구현(preHandle, postHandle 재정의)
	3. springContainer bean등록.
	4. 해당 interceptor가 가로챌 요청에 대한 명시
	
로그인
회원가입
main
회원정보 수정화면 
회원목록 화면

요청정리(/member)
/loginForm 로그인 페이지 요청
/login 로그인 요청
/logout 로그아웃 요청
/joinForm 가입 페이지 요청
/join 가입 요청
/main 메인 페이지 요청
/updateForm 정보 수정 페이지 요청
/update 정보 수정 요청

기능
1. 로그인 성공시 session:userid&main 실패시 login
2. main: 회원목록보기, 회원정보수정, 로그아웃
3. LoginCheckInterceptor로 거름거름
*Controller에서 Session에 접근하려면 HttpSession session을 파라미터에 적으면 된다.

********Controller에서 요청 파라미터 받아오기 **********
파라미터의 이름과 model 멤버의 이름이 같으면(setter의 이름이 같으면)
해당 파라미터를 멤버의 값으로 매핑 시켜준다. 

Map으로 받아오기 
컨트롤러의 메서드에 요청 파라미터를    Map으로 받아 오려면, 
메서드에  Map<String,Object> 파라미터를 하나 추가하고 파라미터 앞에
@RequestParam 을 붙여 준다. 
그러면 요청 파라미터의 이름이 key, 값이 value 인 map을 얻어올 수 있다.

ex)   public String login(@RequestParam Map<String,Object> param){
				....중략....
				param.get("key");
      } 
-------------------------------------------------------------------
RedirectAttributes
Spring MVC controller의 메서드의 반환형이 String일 경우
반환 값은 'view name', 이경우 화면으로 이동하는 기본 방법은 forward
redirect로 화면 전환이 필요할 경우 'redirect:[요청url]'의 형태로 반환하면 된다. 

ex)/main 요청을  redirect 하고 싶을 경우
      
      public String login(){
      	...중략...
      	return "redirect:main";
      }
      
Redirect 시, 속성값을 보내고 싶을 때 RedirectAttributes 객체를 사용
  -1. 컨트롤러 메서드에 RedirectAtrributes 를 파라미터로 선언
  -2. 인자로 넘어온       RedirectAtrributes의 'addFlashAttribute()' 를 이용해 
              속성 추가
	ex) public String login(RedirectAttributes ra) {
		...
		...
		ra.addFlashAttribute("msg","로그인 실패");
		...
		return "redirect:login";
	}
         
----------------------------------------------------
aop 적용
만들어져있는 aop 적용!
transaction : 요청 작업의 단위
ex) 회원가입 기능이 있다.
	회원가입 기능은 사용자가 입력한 id, 이름, 이메일 등을 테이블에 저장하고
	게시판에 자동으로 인사글을 남김

지정한 여러 단위 기능이 모두 정상적으로 동작했을 때만 요청을 처리
하나라도 정상동작 하지 않으면 roll back

boardDao, insertBoard()
MemberController join() transaction aop 적용

aop적용하기
advice 등록하기
1. spring설정파일 - namespace - 
  
